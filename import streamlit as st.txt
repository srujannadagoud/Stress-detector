import streamlit as st
import cv2
import numpy as np
from PIL import Image

# Set Streamlit page configuration
st.set_page_config(
    page_title="üõ†Ô∏è Stress Feature Detector",
    page_icon="üîç",
    layout="wide"
)

# ----------- Custom CSS -----------
st.markdown("""
    <style>
        html, body, [class*="css"] {
            font-family: 'Segoe UI', sans-serif;
            background-color: #0e1117;
            color: #fafafa;
        }

        .title-wrapper {
            text-align: center;
            padding: 20px 0;
        }

        .upload-box {
            background-color: #1f1f1f;
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #333;
            margin-bottom: 30px;
        }

        .card {
            background-color: #1c1c1e;
            padding: 15px;
            border-left: 5px solid #00bcd4;
            margin: 10px 0;
            border-radius: 5px;
        }

        .footer {
            text-align: center;
            font-size: 13px;
            color: #888;
            padding: 20px;
        }
    </style>
""", unsafe_allow_html=True)

# ----------- Title Section -----------
st.markdown("""
<div class="title-wrapper">
    <h1>üõ†Ô∏è Simple Stress Feature Detector</h1>
    <h4>Upload a mechanical part image to identify holes, slots & possible stress areas using CV.</h4>
</div>
""", unsafe_allow_html=True)

# ----------- Upload Section -----------
with st.container():
    st.markdown('<div class="upload-box">', unsafe_allow_html=True)
    uploaded_file = st.file_uploader("üìÇ Drag and drop an image of a mechanical part below", type=["jpg", "jpeg", "png"])
    st.markdown('</div>', unsafe_allow_html=True)

# ----------- Image Processing Function -----------
def analyze_part(image):
    image_np = np.array(image.convert('RGB'))
    image_cv = cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR)
    gray = cv2.cvtColor(image_cv, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)

    edges = cv2.Canny(blur, 50, 150)
    contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    output = image_cv.copy()
    suggestions = []

    max_area = 0
    main_contour = None
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > max_area:
            max_area = area
            main_contour = contour

    dimensions = None
    if main_contour is not None:
        x, y, w, h = cv2.boundingRect(main_contour)
        cv2.rectangle(output, (x, y), (x + w, y + h), (0, 255, 0), 2)
        dimensions = (w, h)

    # Detect circles
    circles = cv2.HoughCircles(blur, cv2.HOUGH_GRADIENT, dp=1.2, minDist=30,
                               param1=100, param2=30, minRadius=5, maxRadius=60)
    if circles is not None:
        circles = np.uint16(np.around(circles))
        for i in circles[0, :]:
            cx, cy, r = i
            cv2.circle(output, (cx, cy), r, (255, 0, 0), 2)
            suggestions.append(f"üü¢ Circular hole at ({cx}, {cy}), radius: {r}px")

    # Detect rectangular slots
    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area < 100:
            continue
        approx = cv2.approxPolyDP(cnt, 0.02 * cv2.arcLength(cnt, True), True)

        if len(approx) == 4:
            x, y, w, h = cv2.boundingRect(approx)
            cv2.drawContours(output, [approx], -1, (0, 255, 255), 2)
            suggestions.append(f"üü° Possible slot at ({x}, {y}) - size: {w}px x {h}px")

    output = cv2.cvtColor(output, cv2.COLOR_BGR2RGB)
    return output, suggestions, dimensions

# ----------- Result Section -----------
if uploaded_file:
    image = Image.open(uploaded_file)

    with st.spinner("üîç Analyzing Image..."):
        result_img, tips, dims = analyze_part(image)

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üñºÔ∏è Original Image")
        st.image(image, use_column_width=True)

    with col2:
        st.subheader("üìå Detected Features")
        st.image(result_img, use_column_width=True)

    # --- Dimensions Card ---
    if dims:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown("### üìè Estimated Dimensions")
        st.write(f"- Width: **{dims[0]} px**")
        st.write(f"- Height: **{dims[1]} px**")
        st.markdown("</div>", unsafe_allow_html=True)

    # --- Suggestions Card ---
    st.markdown("### üí° Suggestions for Improvement")
    if tips:
        for tip in tips:
            st.markdown(f"<div class='card'>{tip}</div>", unsafe_allow_html=True)
    else:
        st.success("‚úÖ No prominent stress concentrators found.")

# ----------- Footer -----------
st.markdown("<div class='footer'>Made with ‚ù§Ô∏è using Streamlit ¬∑ GitHub: <a href='https://github.com/YOURUSERNAME' style='color:#00bcd4'>@yourusername</a></div>", unsafe_allow_html=True)